{"functional": "# Functional Programming in Python\n\n\nThere are three common types of operations with functional programming\n* Filter (Keep relevant items only)\n* Map (Transformation)\n* Reduce (Converge to a value)\n\n\n## Filter\nLet's look at `filter` first to understand how it can be used in Python. \n\n### Keep only even numbers\n\nFirst, we will have a look at the loop approach, which is a common way of solving this problem. \n\n```python\nnums = [num for num in range(11)]\n\ndef is_even(num):\n    return num % 2 == 0\n\n### focus start\nall_evens = []\nfor num in nums:\n    if is_even(num):\n        all_evens.append(num)\n### focus end\n\nprint(all_evens)\n```\n\nPhew! That's a lot of lines of code. Can we simplify the loop section? Yes we can!.\n\n```python\nnums = [num for num in range(11)]\n\ndef is_even(num):\n    return num % 2 == 0\n\n### focus start\nall_evens = list (filter(is_even, nums))\n### focus end\n\nprint(all_evens)\n```\n\nYou can also specify your filter function inline using `Lambdas`. \n\n```python\nnums = [num for num in range(11)]\nevens_with_lambda = list ( filter(lambda num: num%2 == 0, nums))\nprint(evens_with_lambda)\n```\n\nEach list item, in this case each number is passed into the first parameter of the function specified in filter. \n\nIf that function returns `True` the item is kept, otherwise it is ignored.\n\n\n## Map\nNow, let's look at transforming iterables (lists) in Python. \n\nIf you can write a function to convert a single value, like `calculate_area_from_radius(radius=___)`, this can be easily extended to convert all elements in a list. \n\n```python\ndef area(radius):\n    return math.pi * (radius**2)\n\ncircle_radiuses = [2, 3, 10.5] # radius in cm\nareas = []\nfor radius in circle_radiuses:\n    circle_area = area(radius)\n    areas.append(circle_area)\nprint(areas)\n```\n\nThis can be re-written to use `map`\n\n```python\n\ndef area(radius):\n    return math.pi * (radius**2)\n\ncircle_radiuses = [2, 3, 10.5] # radius in cm\nareas = list(map(area, circle_radiuses))\nprint(areas)\n\n```\n\n## Reduce\nWill be updated later...\n\n", "comprehensions": "# List Comprehensions\n\nList comprehension is a shorter way to create a Python list without using loops. \n\nWe can work through common examples:\n\n### List of number range\n\n```python3\n# Common way \ud83e\uddd9\u200d\u2640\ufe0f\nzero_to_ten = []\nfor num in range(11):\n    zero_to_ten.append(num)\nprint(zero_to_ten)\n```\n\nInstead of the loop, let's look at the comprehension method. \n\n```python3\n# List comprehension method \u2705\nzero_to_ten = [num for num in range(1, 11)]\nprint(zero_to_ten)\n```\n\n### Even numbers from 0-10\n```python3\neven_nums_0_to_10 = [even_num for even_num in range(0, 11, 2)]\nprint(even_nums_0_to_10)\n```\n\n### Squares of numbers 0-10\n```python3\nsquares_of_nums_0_to_10 = [num**2 for num in range(0, 11)]\nprint(squares_of_nums_0_to_10)\n```\nNotice you can add any python expresson before the `for`. In the above example note `num**2`. \n\n\n>\ud83d\udca1 Tip: You can also call other methods or construct other classes.\n\n### List Copy\n```python3\nnames = [\"adam\", \"bob\", \"chrissy\", \"daisy\"]\n# Create a non-reference copy of the list\ncopy_list = [item for item in names]\nprint(copy_list)\nprint(hex(id(names)), hex(id(copy_list))) # They are different copies\n```\n\n>\u26a0\ufe0f Note: `copy_list = names` only copies the reference and is not the same as creating a new list. \n\n\n\n"}